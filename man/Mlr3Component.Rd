% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Mlr3Component.R
\name{Mlr3Component}
\alias{Mlr3Component}
\title{Common Base Class for mlr3 Components}
\description{
A pragmatic, lightweight base class that captures common patterns across
the mlr3 ecosystem.
It standardizes fields like \code{id}, \code{label}, \code{param_set}, \code{packages}, and \code{man},
and provides shared methods for printing, help lookup, configuration of
parameter values and fields, and stable hashing.

Subclasses can specialize behavior by:
\itemize{
\item Adding additional public/active fields and methods.
\item Overriding \code{print()} for richer output.
\item Extending the hash inputs via \code{private$.extra_hash} or by overriding
the \code{hash}/\code{phash} active bindings if necessary.
}
}
\section{Construction}{

Mlr3Component$new(id, param_set = NULL, packages = character(),
label = NA_character_, man = NA_character_)
\itemize{
\item \code{id} (\code{character(1)}): Identifier of the component.
\item \code{param_set} (\link[paradox:ParamSet]{paradox::ParamSet} | \code{NULL}): Optional hyperparameter set.
If given, its \verb{$values} are used by \verb{$configure()} and are included in the hash.
\item \code{packages} (\code{character()}): Required packages (namespaces). Not attached.
}
}

\section{Inheriting}{

To create your own \code{Mlr3Component}, you need to overload the \verb{$initialize()} function to do additional
initialization. The \verb{$initialize()} method should have at least the arguments \code{id} and \code{param_set}, which should be
passed on to \code{super$initialize()} unchanged.
To create a class without a \code{param_set}, you can pass \code{NULL} as the \code{param_set} argument.
\code{packages} should have the default value \code{character(0)}, meaning no packages are required.
\code{properties} should have the default value \code{character(0)}, meaning no properties are set.

If the \verb{$initialize()} method has more arguments, then it is necessary to also overload the
\code{private$.additional_phash_input()} function. This function should return either all objects, or a hash of all
objects, that can change the function or behavior of the \code{Mlr3Component} and are independent
of the class, the id, the \verb{$state}, and the \verb{$param_set$values}. The last point is particularly important:
changing the \verb{$param_set$values} should
\emph{not} change the return value of \code{private$.additional_phash_input()}.
}

\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{id}}{(\code{character(1)})
Identifier of the object.
Used in tables, plot and text output.}

\item{\code{label}}{(\code{character(1)})
Human-friendly label.
Can be used in tables, plot and text output instead of the ID.}

\item{\code{packages}}{(\code{character()})
Set of required packages.
These packages are loaded, but not attached.}

\item{\code{properties}}{(\code{character()})\cr
Stores a set of properties/capabilities the object has.}

\item{\code{param_set}}{(\link[paradox:ParamSet]{paradox::ParamSet} | \code{NULL})
Set of hyperparameters.}

\item{\code{man}}{(\code{character(1)})
String in the format \verb{[pkg]::[class name]} pointing to a manual page for this object.}

\item{\code{hash}}{(\code{character(1)})
Stable hash that includes id, parameter values (if present) and \code{private$.extra_hash} fields.}

\item{\code{phash}}{(\code{character(1)})
Stable hash excluding parameter values (for tuning / partial identity), but including \code{private$.extra_hash}.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-Mlr3Component-new}{\code{Mlr3Component$new()}}
\item \href{#method-Mlr3Component-format}{\code{Mlr3Component$format()}}
\item \href{#method-Mlr3Component-print}{\code{Mlr3Component$print()}}
\item \href{#method-Mlr3Component-help}{\code{Mlr3Component$help()}}
\item \href{#method-Mlr3Component-configure}{\code{Mlr3Component$configure()}}
\item \href{#method-Mlr3Component-require_namespaces}{\code{Mlr3Component$require_namespaces()}}
\item \href{#method-Mlr3Component-override_info}{\code{Mlr3Component$override_info()}}
\item \href{#method-Mlr3Component-clone}{\code{Mlr3Component$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Mlr3Component-new"></a>}}
\if{latex}{\out{\hypertarget{method-Mlr3Component-new}{}}}
\subsection{Method \code{new()}}{
Construct a new \code{Mlr3Component}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Mlr3Component$new(
  dict_entry,
  dict_shortaccess,
  id = dict_entry,
  param_set = ps(),
  packages = character(0),
  properties = character(0),
  representable = TRUE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character(1)})}

\item{\code{param_set}}{(\link[paradox:ParamSet]{paradox::ParamSet} | \code{NULL})}

\item{\code{packages}}{(\code{character()})}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Mlr3Component-format"></a>}}
\if{latex}{\out{\hypertarget{method-Mlr3Component-format}{}}}
\subsection{Method \code{format()}}{
Helper for print outputs.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Mlr3Component$format(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{(ignored).}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Mlr3Component-print"></a>}}
\if{latex}{\out{\hypertarget{method-Mlr3Component-print}{}}}
\subsection{Method \code{print()}}{
Printer with concise, unified output.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Mlr3Component$print(...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Mlr3Component-help"></a>}}
\if{latex}{\out{\hypertarget{method-Mlr3Component-help}{}}}
\subsection{Method \code{help()}}{
Opens the corresponding help page referenced by field \verb{$man}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Mlr3Component$help()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Mlr3Component-configure"></a>}}
\if{latex}{\out{\hypertarget{method-Mlr3Component-configure}{}}}
\subsection{Method \code{configure()}}{
Set parameter values and fields in one step.
Named arguments overlapping with the \code{ParamSet} are set as parameters;
remaining arguments are assumed to be regular fields of the object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Mlr3Component$configure(..., .values = list())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{(named \code{any})}

\item{\code{.values}}{(named \code{list()})}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Mlr3Component-require_namespaces"></a>}}
\if{latex}{\out{\hypertarget{method-Mlr3Component-require_namespaces}{}}}
\subsection{Method \code{require_namespaces()}}{
Convenience: load (not attach) required namespaces.
Raises a \code{packageNotFoundError} if loading fails.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Mlr3Component$require_namespaces()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Mlr3Component-override_info"></a>}}
\if{latex}{\out{\hypertarget{method-Mlr3Component-override_info}{}}}
\subsection{Method \code{override_info()}}{
Override the \code{man} and \code{hash} fields.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Mlr3Component$override_info(man = NULL, hash = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{man}}{(\code{character(1)} | \code{NULL})
The manual page of the component.}

\item{\code{hash}}{(\code{character(1)} | \code{NULL})
The hash of the component.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Mlr3Component-clone"></a>}}
\if{latex}{\out{\hypertarget{method-Mlr3Component-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Mlr3Component$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
