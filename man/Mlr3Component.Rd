% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Mlr3Component.R
\name{Mlr3Component}
\alias{Mlr3Component}
\title{Common Base Class for mlr3 Components}
\description{
A pragmatic, lightweight base class that captures common patterns across the mlr3 ecosystem.
It standardizes various fields and provides shared methods for printing, help lookup, setting parameter values and fields, and hashing.

Semantically, an mlr3 component is usually an object representing an algorithm or a method, such as a \link[mlr3:Learner]{mlr3::Learner} or a \link[mlr3:Measure]{mlr3::Measure}.
This algorithm can be configured though its parameters, accessible as the \link[paradox:ParamSet]{paradox::ParamSet} in the \verb{$param_set} field, as well as
through various other custom algorithm-specific fields.
All of these together can be changed via the \verb{$configure()} method.
Some components, such as prominently the \link[mlr3:Learner]{mlr3::Learner}, also have "state", such as the learned model.

The identity of an object represented by an \code{\link{Mlr3Component}} is sometimes important, for example when aggregating benchmark results accross various settings of different algorithms used in tha benchmark, such as different \link[mlr3:Learner]{mlr3::Learner}s or different \link[mlr3:Measure]{mlr3::Measure}.
For this,the component provides a \verb{$hash} field, which should identify the algorithm and its configuration, without including the state.
There is also the \verb{$phash} field, which identifies the algorithm without its \verb{$param_set} configuration -- this is used when aggregating benchmark results for individual algorithms when these algorithms were evaluated for different configuration parameter settings.

\code{\link{Mlr3Component}}s should usually be constructed from a \link{Dictionary}, which should be accessible via a short-form, such as \link[mlr3:mlr_sugar]{mlr3::lrn} or \link[mlr3pipelines:po]{mlr3pipelines::po}.
}
\section{Inheriting}{

To create your own \code{Mlr3Component}, you need to overload the \verb{$initialize()} function.
A concrete class should ideally provide all arguments of the \verb{$initialize()} directly, i.e. the user should not need to provide \code{id} or \code{param_set}.

The information contained in a concrete mlr3 component should usually be completely determined by four things:
\enumerate{
\item The \emph{construction arguments} given to the \verb{$initialize()} method of the concrete class.
These can be \code{\link{Mlr3Component}}s themselves, or configuration options that do not naturally fit into the \link[paradox:ParamSet]{paradox::ParamSet}.
These arguments should \emph{not} overlap with the \link[paradox:ParamSet]{paradox::ParamSet} parameters, and should not be the construction arguments of the
abstract \link{Mlr3Component} base class such as \code{id} or \code{packages}.
\item The \emph{configuration arguments} inside \verb{$param_set$values}.
\item Additional \emph{configuration settings} that influence the behavior of the component, but are not part of the \link[paradox:ParamSet]{paradox::ParamSet} because they do not naturally constitute a dimension that could be optimized.
\item Some additional \emph{state information}, storing the result of the algorithm, such as the learned model, often contained in a field called \verb{$state}.
}

Information from 1. should also be made accessible as active bindings, with the same name as the construction arguments.

The information from 1., and 3. is contained in the \verb{$phash} value.
For this, the \code{private$.additional_phash_input()} function needs to be overloaded by subclasses.
It is often sufficient for an abstract subclass to implement this, and concrete classes to inherit from this. E.g. the \link[mlr3:Learner]{mlr3::Learner} class implements \verb{$private$.additional_phash_input()} to return the necessary iformation to be included in the \verb{$phash} for almost all possible \link[mlr3:Learner]{mlr3::Learner}s.
Only concrete \link[mlr3:Learner]{mlr3::Learner}s that contain additional information not contained in one of the standard fields needs to overload the function again, such as e.g. \link[mlr3tuning:AutoTuner]{mlr3tuning::AutoTuner}.
It is best if this second overload only collects the additional information not contained in the abstract base class, and also calls \code{super$.additional_phash_input()}.

The information from 1., 2., and 3. together is contained in the \verb{$phash} value.
It is also collected automatically from the \code{private$.additional_phash_input()} function, as well as the \verb{$param_set$values} field.

To create a class without a \code{param_set}, you can pass \code{NULL} as the \code{param_set} argument.
\code{packages} should have the default value \code{character(0)}, meaning no packages are required.
\code{properties} should have the default value \code{character(0)}, meaning no properties are set.

If the \verb{$initialize()} method has more arguments, then it is necessary to also overload the
\code{private$.additional_phash_input()} function. This function should return either all objects, or a hash of all
objects, that can change the function or behavior of the \code{Mlr3Component} and are independent
of the class, the id, the \verb{$state}, and the \verb{$param_set$values}. The last point is particularly important:
changing the \verb{$param_set$values} should
\emph{not} change the return value of \code{private$.additional_phash_input()}.
}

\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{id}}{(\code{character(1)})
Identifier of the object.
Used in tables, plot and text output.}

\item{\code{label}}{(\code{character(1)})
Human-friendly label.
Can be used in tables, plot and text output instead of the ID.}

\item{\code{packages}}{(\code{character()})
Set of required packages.
These packages are loaded, but not attached.}

\item{\code{properties}}{(\code{character()})\cr
Stores a set of properties/capabilities the object has.}

\item{\code{param_set}}{(\link[paradox:ParamSet]{paradox::ParamSet} | \code{NULL})
Set of hyperparameters.}

\item{\code{man}}{(\code{character(1)})
String in the format \verb{[pkg]::[class name]} pointing to a manual page for this object.}

\item{\code{hash}}{(\code{character(1)})
Stable hash that includes id, parameter values (if present) and \code{private$.extra_hash} fields.}

\item{\code{phash}}{(\code{character(1)})
Stable hash excluding parameter values (for tuning / partial identity), but including \code{private$.extra_hash}.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-Mlr3Component-new}{\code{Mlr3Component$new()}}
\item \href{#method-Mlr3Component-format}{\code{Mlr3Component$format()}}
\item \href{#method-Mlr3Component-print}{\code{Mlr3Component$print()}}
\item \href{#method-Mlr3Component-help}{\code{Mlr3Component$help()}}
\item \href{#method-Mlr3Component-configure}{\code{Mlr3Component$configure()}}
\item \href{#method-Mlr3Component-override_info}{\code{Mlr3Component$override_info()}}
\item \href{#method-Mlr3Component-clone}{\code{Mlr3Component$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Mlr3Component-new"></a>}}
\if{latex}{\out{\hypertarget{method-Mlr3Component-new}{}}}
\subsection{Method \code{new()}}{
Construct a new \code{Mlr3Component}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Mlr3Component$new(
  dict_entry,
  dict_shortaccess,
  id = dict_entry,
  param_set = ps(),
  packages = character(0),
  properties = character(0),
  representable = TRUE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character(1)})}

\item{\code{param_set}}{(\link[paradox:ParamSet]{paradox::ParamSet} | \code{NULL})}

\item{\code{packages}}{(\code{character()})}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Mlr3Component-format"></a>}}
\if{latex}{\out{\hypertarget{method-Mlr3Component-format}{}}}
\subsection{Method \code{format()}}{
Helper for print outputs.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Mlr3Component$format(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{(ignored).}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Mlr3Component-print"></a>}}
\if{latex}{\out{\hypertarget{method-Mlr3Component-print}{}}}
\subsection{Method \code{print()}}{
Printer with concise, unified output.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Mlr3Component$print(...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Mlr3Component-help"></a>}}
\if{latex}{\out{\hypertarget{method-Mlr3Component-help}{}}}
\subsection{Method \code{help()}}{
Opens the corresponding help page referenced by field \verb{$man}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Mlr3Component$help()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Mlr3Component-configure"></a>}}
\if{latex}{\out{\hypertarget{method-Mlr3Component-configure}{}}}
\subsection{Method \code{configure()}}{
Set parameter values and fields in one step.
Named arguments overlapping with the \code{ParamSet} are set as parameters;
remaining arguments are assumed to be regular fields of the object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Mlr3Component$configure(..., .values = list())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{(named \code{any})}

\item{\code{.values}}{(named \code{list()})}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Mlr3Component-override_info"></a>}}
\if{latex}{\out{\hypertarget{method-Mlr3Component-override_info}{}}}
\subsection{Method \code{override_info()}}{
Override the \code{man} and \code{hash} fields.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Mlr3Component$override_info(man = NULL, hash = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{man}}{(\code{character(1)} | \code{NULL})
The manual page of the component.}

\item{\code{hash}}{(\code{character(1)} | \code{NULL})
The hash of the component.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Mlr3Component-clone"></a>}}
\if{latex}{\out{\hypertarget{method-Mlr3Component-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Mlr3Component$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
