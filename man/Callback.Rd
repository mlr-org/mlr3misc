% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Callback.R
\name{Callback}
\alias{Callback}
\title{Callback}
\description{
Generic implementation of a callback mechanism.
Callbacks allow to give more user control to customize the behaviour of mlr3 processes.
To make use of this mechanism, three elements are required:
\itemize{
\item A function that accepts a list of callbacks and executes them using the function
\code{call_back()}.
\item A context that defines which information of the function can be accessed from the callback.
If the callback is allowed to modify this information the context can be an environment
or R6Class itself. Read-only access can be implemented using active bindings.
\item One or more callback functions.
}

Use the \code{as_callback()} function to create a Callback.
}
\examples{
MyCallback = R6Class("MyCallback",
  inherit = Callback,
  lock_objects = FALSE,
  public = list(
    initialize = function(id = "mycallback", a, b) {
      self$id = id
      self$a = a
      self$b = b
    },
    step1 = function(context) {
      catf("This is step1 calling!")
      context$info = "New value"
      self$x = runif(1, min = self$a, max = self$b)
    },
    step2 = function(context) {
      catf("This is step2 calling!")
      catf("The value 'info' of context is now: \%s", context$info)
      catf("The randomly generated number of step1 was: \%.2f", self$x)
    }
  )
)
mycb = MyCallback$new(a = -1, b = 1)
callbacks = list(mycb)
f = function(callbacks) {
  context = new.env()
  context$info = "Some Information"

  call_back("step1", callbacks, context)
  catf("foo")
  call_back("step2", callbacks, context)
  return(NULL)
}
f(callbacks)
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{id}}{(\code{character(1)})\cr
Identifier of the callback.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-Callback-new}{\code{Callback$new()}}
\item \href{#method-Callback-call}{\code{Callback$call()}}
\item \href{#method-Callback-clone}{\code{Callback$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Callback-new"></a>}}
\if{latex}{\out{\hypertarget{method-Callback-new}{}}}
\subsection{Method \code{new()}}{
Creates a new instance of this \link[R6:R6Class]{R6} class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Callback$new(id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character(1)})\cr
Identifier for the new callback.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Callback-call"></a>}}
\if{latex}{\out{\hypertarget{method-Callback-call}{}}}
\subsection{Method \code{call()}}{
Call the specific step for a given context.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Callback$call(step, context)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{step}}{(\code{character(1)})\cr
Step.}

\item{\code{context}}{(\code{Context})\cr
Context.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Callback-clone"></a>}}
\if{latex}{\out{\hypertarget{method-Callback-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Callback$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
