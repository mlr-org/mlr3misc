% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/register_dictionary.R
\name{register_dictionary}
\alias{register_dictionary}
\alias{publish_registered_dictionary}
\title{Add Object to Dictionary at Runtime}
\usage{
register_dictionary(dict_name, ...)

publish_registered_dictionary(dict_name, dict_call,
  targetenv = parent.env(parent.frame()))
}
\arguments{
\item{dict_name}{(\code{character(1)})\cr
Name of dictionary to register the call to. Must be identical between
\code{register_dictionary} and \code{publish_registered_dictionary} calls.}

\item{...}{(any)\cr
Arguments of \code{dict_call} to use when creating dictionary entry.}

\item{dict_call}{(\code{function})\cr
Function to call for each registered dictionary entry.}

\item{targetenv}{(\code{environment})\cr
Environment in which \code{register_dictionary} was executed, usually the
package's namespace.}
}
\description{
\code{register_dictionary} registers that a dictionary entry
should be created using the given arguments. \code{publish_registered_dictionary}
executes these calls. \code{register_dictionary} can be used during build-time
(i.e. at the top-level of the package), while \code{publish_registered_dictionary}
should be called in \code{.onLoad()}.
}
\examples{
\dontrun{
# in package top level code:
register_dictionary("learner", "regr.rpart", LearnerRegrRpart)

# .onLoad code:
.onLoad = function(libname, pkgname) {
  if (is.null(mlr_learners)) {
    mlr_learners <<- DictionaryLearner$new()
  }
  publish_registered_dictionary("learner", mlr_learners$add)
}
}
}
